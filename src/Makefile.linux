#
# (c) 2017 by University of Delaware, Argonne National Laboratory, San Diego
#     Supercomputer Center, National University of Defense Technology,
#     National Supercomputer Center in Guangzhou, and Sun Yat-sen University.
#
#     See COPYRIGHT in top-level directory.
#
# skeleton of generic makefile

OBJDIR	:= build

SRCDIRS	:=
USRINCS	:=
USRLIBS	:=

# config binaries
CPP		:=
CC		:= mpicc
CXX		:= mpic++
LD		:= mpic++
AR		:= ar

SHELL	:= /bin/sh
RM		:= rm -f

# DEPFLAGS:= -M

CPPFLAGS:= -DENABLE_PROFILER
CPPFLAGS+= -DENABLE_TRACKER
CPPFLAGS+= -DNDEBUG
# CPPFLAGS+= -DFT_REG

# Using pkg-config for c/cxxflags
# SHRFLAGS:= $(shell pkg-config --cflags gtk+-2.0)
SHRFLAGS:= -g -Wno-write-strings -Wall -Wconversion -O3
# SHRFLAGS+= -I$(USRINCS)
# SHRFLAGS:= -pg -I$(USRINCS) -fpermissive
CFLAGS	:= $(SHRFLAGS) -std=c99
CXXFLAGS:= $(SHRFLAGS) -std=c++11 -fpermissive

# Using pkg-config for libs 
# LDFLAGS	:= $(shell pkg-config --libs gtk+-2.0)
# LDFLAGS	:= -lmpl -lpthread
# LDFLAGS	+= -lboost_system -lboost_filesystem -lboost_regex
# LDFLAGS	+= $(shell pkg-config --libs mpich)
# LDFLAGS	+= -L$(HOME)/.local/usr/lib -Wl,-rpath -Wl,$(HOME)/.local/usr/lib -lmpi -lrt
# LDFLAGS	+= $(USRLIBS)
# LDFLAGS	+= -rdynamic

ARFLAGS	:= -rcv

HEADERS	:= $(wildcard *.h)
HEADERS	+= $(wildcard *.hpp)
HEADERS	+= $(wildcard $(USRINCS)/*.h)

SRCS	:= $(wildcard *.c)
SRCS	+= $(wildcard *.cpp)
SRCS	+= $(wildcard *.cc)

OBJS	:= $(patsubst %.c, $(OBJDIR)/%.o, $(wildcard *.c))
OBJS	+= $(patsubst %.cpp, $(OBJDIR)/%.o, $(wildcard *.cpp))

DEPS	:= $(patsubst %.o, %.d, $(OBJS))

SHTARGET:= libmimir.so
STTARGET:= libmimir.a

#============================================
# real things

.PHONY : all objs clean lib shlib

.DEFAULT :
	@test -f build_config/$@.mk
	@if [ ! -d build.$@ ]; then mkdir build.$@; fi
	@cat Makefile build_config/$@.mk > makefile.$@
	$(MAKE) "OBJDIR=build.$@" "STTARGET=$(patsubst %.a, %_$@.a, $(STTARGET))" \
	    -f makefile.$@ lib
	@$(RM) makefile.$@

all : lib

lib : $(OBJS)
	$(AR) $(ARFLAGS) $(STTARGET) $(OBJS)

shlib : $(OBJS)
	$(LD) $(CXXFLAGS) $(SHRFLAGS) $(LDFLAGS) -shared -o $(SHTARGET) $(OBJS)

# basic rules
objs : $(OBJS)

$(DEPS) : $(SRCS) $(HEADERS)

-include $(DEPS)

# automation rules
$(OBJDIR)/%.d : %.c
	@if [ ! -d $(OBJDIR) ]; then mkdir $(OBJDIR); fi
	@$(CC) -MM $(CFLAGS) $< -o $@
	@sed -i '1 s/^/$(OBJDIR)\//' $@
	@cp -f $@ $@.tmp
	@sed -e 's/.*://' -e 's/\\$$//' < $@.tmp | fmt -1 | \
		sed -e 's/^ *//' -e 's/$$/:/' >> $@
	@rm -f $@.tmp
$(OBJDIR)/%.d : %.cpp
	@if [ ! -d $(OBJDIR) ]; then mkdir $(OBJDIR); fi
	@$(CC) -MM $(CXXFLAGS) $< -o $@
	@sed -i '1 s/^/$(OBJDIR)\//' $@
	@cp -f $@ $@.tmp
	@sed -e 's/.*://' -e 's/\\$$//' < $@.tmp | fmt -1 | \
		sed -e 's/^ *//' -e 's/$$/:/' >> $@
	@rm -f $@.tmp

$(OBJDIR)/%.o : %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@
$(OBJDIR)/%.o : %.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@



clean : 
	@$(RM) $(DEPS) $(OBJS) $(STTARGET) $(SHTARGET)

clean-% :
	@$(RM) -r build.$(@:clean-%=%) *$(@:clean-%=%).a

